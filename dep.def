SHELL=/bin/bash

#initialize HAVE_ALL_DEPS
HAVE_ALL_DEPS=1

#output directory
LIBDIR=../../lib

#destination of disko tools
ifndef OUTPUTDIR
export OUTPUTDIR=../../bin
endif

#check dependencies

#libpng
ifndef LIBPNG_CHECKED
    $(info check for libpng version >= 1.2)
    ASK=$(shell pkg-config --atleast-version=1.2 libpng && echo "1")
    ifeq ($(ASK),)
        $(warning libpng was not found or version is older than 1.2. Either adjust PKG_CONFIG_PATH or install the package)
        HAVE_ALL_DEPS=0
    else
        export LIBPNG_INC=$(shell pkg-config --cflags libpng)
        export LIBPNG_LIBS=$(shell pkg-config --libs libpng)
    endif
    export LIBPNG_CHECKED=1
endif

#libxml2
ifndef LIBXML_CHECKED
    $(info check for libxml2 version >= 2.6)
    ASK=$(shell pkg-config --atleast-version=2.6 libxml-2.0 && echo "1")
    ifeq ($(ASK),)
        $(warning libxml-2.0 was not found or version is older than 2.6. Either adjust PKG_CONFIG_PATH or install the package)
        HAVE_ALL_DEPS=0
    else
        export LIBXML_INC=$(shell pkg-config --cflags libxml-2.0)
        export LIBXML_LIBS=$(shell pkg-config --libs libxml-2.0)
    endif
    export LIBXML_CHECKED=1
endif

#sqlite3
ifndef SQLITE3_CHECKED
    $(info check for sqlite3)
    export SQLITE3_INC=$(shell pkg-config --cflags sqlite3)
    ifeq ($(SQLITE3_INC),)
        $(info sqlite3 was not found. Either adjust PKG_CONFIG_PATH or install the package)
    else
        export CFLAGS+=-D__ENABLE_SQLITE__ 
        export SQLITE3_LIBS=$(shell pkg-config --libs sqlite3)
    endif
    export SQLITE3_CHECKED=1
endif

#unix-odbc
ifndef ODBC_CHECKED
    $(info check for unix-odbc)
    ASK=$(shell ls $(DESTDIR)/usr/include/sql.h 2>/dev/null)
    ifeq ($(ASK),)
        ASK=$(shell ls $(DESTDIR)/usr/local/include/sql.h 2>/dev/null)
        ifeq ($(ASK),)
            $(info unix-odbc not found)
        else
            export FREETDS_PREFIX=$(DESTIR)/usr/local
        endif
    else
        export FREETDS_PREFIX=$(DESTIR)/usr/
    endif
    ifdef FREETDS_PREFIX
        export FREETDS_INC=-I$(FREETDS_PREFIX)/include 
        export CFLAGS+=-D__ENABLE_FREETDS__ 
        export FREETDS_LIBS=-L$(FREETDS_PREFIX)/lib/ -lodbc
    endif
    export ODBC_CHECKED=1
endif

#database?
ifndef SQLITE3_INC
    ifndef FREETDS_INC
        $(warning No database backend found. Please install either sqlite3 or unix odbc and a fitting driver)
        HAVE_ALL_DEPS=0
    endif
endif

#curl
ifndef CURL_CHECKED
    $(info check for libcurl)
    export CURL_INC=$(shell pkg-config --cflags libcurl)
    ifeq ($(CURL_INC),)
        $(warning libcurl was not found. Either adjust PKG_CONFIG_PATH or install the package)
        HAVE_ALL_DEPS=0
    else
        export CURL_LIBS=$(shell pkg-config --libs libcurl)
    endif
    export CURL_CHECKED=1
endif

#directfb
ifndef DIRECTFB_CHECKED
    $(info check for directfb)
    export DIRECTFB_INC=$(shell pkg-config --cflags directfb)
    ifeq ($(DIRECTFB_INC),)
        $(warning directfb was not found. Either adjust PKG_CONFIG_PATH or install the package)
        HAVE_ALL_DEPS=0
    else
        export DIRECTFB_LIBS=$(shell pkg-config --libs directfb) -Wl,-rpath=$(shell pkg-config --libs-only-L directfb | cut --complement -c1-2)
    endif
    export DIRECTFB_CHECKED=1
endif

#libxine
ifndef XINE_CHECKED
    $(info check for libxine)
    export XINE_LIBS=$(shell pkg-config --libs libxine)
    ifeq ($(XINE_LIBS),)
        $(warning libxine was not found. Either adjust PKG_CONFIG_PATH or install the package)
        HAVE_ALL_DEPS=0
    else
        # have to do some extra checks because openSuse 10.3 installs libxine.pc even if no
        # development package is installed :-(
        export XINE_INC=$(shell pkg-config --cflags libxine)
        ifeq ($(strip $(XINE_INC)),)
            ASK=$(shell ls /usr/include/xine.h 2>/dev/null)
            ifeq ($(ASK),)
                $(warning xine headers were not found. Please install libxine-dev.)
                HAVE_ALL_DEPS=0
            endif
        endif
    endif
    export XINE_CHECKED=1
endif

#sigc++
ifndef SIGC_CHECKED
    $(info check for sigc++)
    export SIGC_INC=$(shell pkg-config --cflags sigc++-2.0)
    ifeq ($(SIGC_INC),)
        $(warning sigc++-2.0 was not found. Either adjust PKG_CONFIG_PATH or install the package)
        HAVE_ALL_DEPS=0
    else
        export SIGC_LIBS=$(shell pkg-config --libs sigc++-2.0)
    endif
    export SIGC_CHECKED=1
endif

#alsa
ifndef ALSA_CHECKED
    $(info check for alsa)
    export ALSA_LIBS=$(shell pkg-config --libs alsa)
    ifeq ($(ALSA_LIBS),)
        $(warning alsa was not found. Either adjust PKG_CONFIG_PATH or install the package)
        HAVE_ALL_DEPS=0
    else
        export ALSA_INC=$(shell pkg-config --cflags alsa)
    endif
    export ALSA_CHECKED=1
endif

#openssl
ifndef OPENSSL_CHECKED
    $(info check for openssl)
    export OPENSSL_LIBS=$(shell pkg-config --silence-errors --libs openssl)
    ifeq ($(OPENSSL_LIBS),)
        $(warning openssl was not found. Building without mmscrypt support.)
        export OPENSSL_INC=-D_NO_MMSCRYPT
    else
        export OPENSSL_INC=$(shell pkg-config --cflags openssl)
    endif
    export OPENSSL_CHECKED=1
endif

ifeq ($(HAVE_ALL_DEPS),0)
    $(error Please install all dependencies before continuing.)
endif

#my includes
ifndef INC
    export INC= -I../../inc 
endif 

#libs
ifndef LIBS 
    export LIBS=-L../../lib
endif

#ar
ifndef AR
    export AR=ar
endif

#ranlib
ifndef RANLIB
    export RANLIB=ranlib
endif

#directories
ifeq ($(prefix),)
    export prefix=$(HOME)/$(PROJECTNAME)
else
    export prefix
endif

ifeq ($(bindir),)
    export bindir=$(prefix)/bin
endif

ifeq ($(incdir),)
    export incdir=$(prefix)/inc
endif

ifeq ($(libdir),)
    export libdir=$(prefix)/lib
endif

ifeq ($(datadir),)
    export datadir=$(prefix)/share/
endif

ifeq ($(sysconfir),)
    export sysconfdir=$(prefix)/etc
endif

#set debug and profiling flags
ifndef PROFILE_FLAG_SET
    export PROFILE_FLAG_SET=1
    ifneq ($(profile),)
        export CFLAGS+=-pg
        export LDFLAGS+=-pg
        debug=yes
    endif
endif

ifndef DEBUG_FLAG_SET
    export DEBUG_FLAG_SET=1
    ifneq ($(debug),)
	    export CFLAGS+=-O0 -g -Wall
    else
        export CFLAGS+=-O3
    endif
endif

ifndef LOG_FLAG_SET
    export LOG_FLAG_SET=1
    ifneq ($(messages),)
        export CFLAGS+=-D__ENABLE_LOG__
    endif
endif
